!!!
%html
  %head
    %title Realtime Benchmarks
    %link{:rel => :stylesheet, :type => :"text/css", :href => "/stylesheets/nv.d3.css"}
    %link{:rel => :stylesheet, :type => :"text/css", :href => "/stylesheets/index.css"}
    %link{:rel => :stylesheet, :type => :"text/css", :href => 'http://fonts.googleapis.com/css?family=Open+Sans:400,700,600,300'}
  %body
    %script{src: "http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"}
    %script{src: "http://js.pusher.com/2.1/pusher.min.js"}
    %script{src: "../js/d3.js"}
    %script{src: "../js/nv.d3.js"}
    %script{src: "../js/Graph.js"}

    %header.main-heading Realtime Benchmarks
    
    %div.timeframe
      I want to see data since
      %input{:type =>"text", :name =>"time", :class => "update-graph-text", :placeholder => "yesterday morning"}
      %input{:type => "submit", :value => "Update", :class => "update-graph-button"}
  
    %div.current-timeframe{ data: { timeframe: "last week" } }

    %section.sidebar
      %div.reliability-sidebar Reliability
      %div.latency-sidebar Latency

    %section.content

      %section.reliabilities
        %div.service-reliabilities
          %div.service-reliability
            %div.service-title.pusher-title
              Pusher
            %h3.pusher-reliability-score
          %div.service-reliability
            %div.service-title.pubnub-title
              PubNub
            %h3.pubnub-reliability-score
          %div.service-reliability
            %div.service-title.realtimeco-title
              RealtimeCo
            %h3.realtimeco-reliability-score

      #chart
        %svg
    
    :javascript
      $(".update-graph-button").on( "click", function() {
        var time_data = $(".update-graph-text").val();
        $(".current-timeframe").attr("data-timeframe", time_data);
        $.ajax({
          type: 'POST',
          url: '/new_latency_data',
          data: { since: time_data },
          success: function (response) {
                    console.log(response);
                    var updatedData = response;
                    
                    nv.addGraph(function() {
                      var chart = nv.models.lineChart()
                        .margin({left: 100, bottom: 100})  
                        .useInteractiveGuideline(true)  
                        .transitionDuration(350)  
                        .showLegend(true)       
                        .showYAxis(true)        
                        .showXAxis(true);
                      
                      chart.xAxis 
                        .axisLabel('Date')
                        .rotateLabels(-45)
                        .tickFormat(function(d) { return d3.time.format('%d-%m-%Y %H:%M:%S')(new Date(d)) });
                       
                      chart.yAxis
                        .axisLabel('Latency (ms)')
                        .tickFormat(d3.format('.0f'));

                      var pusherData = JSON.parse(updatedData[0]);
                      var pubnubData = JSON.parse(updatedData[1]);
                      var realtimecoData = JSON.parse(updatedData[2]);

                      // Make the dates easy for d3 to work with
                      pusherData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      pubnubData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      realtimecoData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      var serviceData = [pusherData, pubnubData, realtimecoData];

                      d3.select('#chart svg')    
                        .datum(serviceData)
                        .call(chart);

                      //Update the chart when window resizes.
                      nv.utils.windowResize(function() { chart.update() });
                      return chart;
                    });
          }
        });
        
        $.ajax({
          type: 'POST',
          url: '/new_reliability_data',
          data: { since: current_timeframe },
          success: function (response) {
            var updatedData = response;

            var pusherReliability = JSON.parse(updatedData[0]);
            var pubnubReliability = JSON.parse(updatedData[1]);
            var realtimecoReliability = JSON.parse(updatedData[2]);

            $(".pusher-reliability-score").text(pusherReliability["reliability"] + "%")
            $(".pubnub-reliability-score").text(pubnubReliability["reliability"] + "%")
            $(".realtimeco-reliability-score").text(realtimecoReliability["reliability"] + "%")
          }
        });
      });

      nv.addGraph(function() {
        var chart = nv.models.lineChart()
          .margin({left: 100, bottom: 120})  
          .useInteractiveGuideline(true)  
          .transitionDuration(350)  
          .showLegend(true)       
          .showYAxis(true)        
          .showXAxis(true);
      
        chart.xAxis 
          .axisLabel('Date')
          .rotateLabels(-45)
          .tickFormat(function(d) { return d3.time.format('%d-%m-%Y %H:%M:%S')(new Date(d)) });
       
        chart.yAxis
          .axisLabel('Latency (ms)')
          .tickFormat(d3.format('.0f'));
       
        var pusherData = #{@pusher_latency};
        var pubnubData = #{@pubnub_latency};
        var realtimecoData = #{@realtime_co_latency};

        // Make the dates easy for d3 to work with
        pusherData["values"].forEach(function(hash) {
          hash["x"] = new Date(hash["x"]);
        });

        pubnubData["values"].forEach(function(hash) {
          hash["x"] = new Date(hash["x"]);
        });

        realtimecoData["values"].forEach(function(hash) {
          hash["x"] = new Date(hash["x"]);
        });

        var serviceData = [pusherData, pubnubData, realtimecoData];
       
        d3.select('#chart svg')    
          .datum(serviceData)         
          .call(chart);
       
        //Update the chart when window resizes.
        nv.utils.windowResize(function() { chart.update() });
        return chart;
      });

      var pusherReliability = #{@pusher_reliability};
      $(".pusher-reliability-score").text(pusherReliability["reliability"] + "%")
      // $(".pusher-reliability-score").css( "color", pusherReliability["color"] );
      // $(".pusher-title").css( "color", pusherReliability["color"] );

      var pubnubReliability = #{@pubnub_reliability};
      $(".pubnub-reliability-score").text(pubnubReliability["reliability"] + "%")
      // $(".pubnub-reliability-score").css( "color", pubnubReliability["color"] );
      // $(".pubnub-title").css( "color", pubnubReliability["color"] );

      var realtimecoReliability = #{@realtime_co_reliability};
      $(".realtimeco-reliability-score").text(realtimecoReliability["reliability"] + "%")
      // $(".realtimeco-reliability-score").css( "color", realtimecoReliability["color"] );
      // $(".realtimeco-title").css( "color", realtimecoReliability["color"] );

      mongoUpdateChannel.bind( 'reliabilities-update', function( message ) {
        $.ajax({
          type: 'POST',
          url: '/new_reliability_data',
          data: { since: current_timeframe },
          success: function (response) {
            var updatedData = response;

            var pusherReliability = JSON.parse(updatedData[0]);
            var pubnubReliability = JSON.parse(updatedData[1]);
            var realtimecoReliability = JSON.parse(updatedData[2]);

            $(".pusher-reliability-score").text(pusherReliability["reliability"] + "%")
            $(".pubnub-reliability-score").text(pubnubReliability["reliability"] + "%")
            $(".realtimeco-reliability-score").text(realtimecoReliability["reliability"] + "%")
          }
        });      
      });


      var pusher = new Pusher( 'a8536d1bddd6f5951242' );
      var mongoUpdateChannel = pusher.subscribe( 'mongo' );
      mongoUpdateChannel.bind( 'latencies-update', function( message ) {
        var current_timeframe = $(".current-timeframe").attr("data-timeframe");
        $.ajax({
          type: 'POST',
          url: '/new_latency_data',
          data: { since: current_timeframe },
          success: function (response) {
                    console.log(response);
                    var updatedData = response;
                    
                    nv.addGraph(function() {
                      var chart = nv.models.lineChart()
                        .margin({left: 100, bottom: 100})  
                        .useInteractiveGuideline(true)  
                        .transitionDuration(350)  
                        .showLegend(true)       
                        .showYAxis(true)        
                        .showXAxis(true);
                      
                      chart.xAxis 
                        .axisLabel('Date')
                        .rotateLabels(-45)
                        .tickFormat(function(d) { return d3.time.format('%d-%m-%Y %H:%M:%S')(new Date(d)) });
                       
                      chart.yAxis
                        .axisLabel('Latency (ms)')
                        .tickFormat(d3.format('.0f'));
    
                      var pusherData = JSON.parse(updatedData[0]);
                      var pubnubData = JSON.parse(updatedData[1]);
                      var realtimecoData = JSON.parse(updatedData[2]);

                      // Make the dates easy for d3 to work with
                      pusherData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      pubnubData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      realtimecoData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      var serviceData = [pusherData, pubnubData, realtimecoData];

                      d3.select('#chart svg')    
                        .datum(serviceData)
                        .call(chart);

                      //Update the chart when window resizes.
                      nv.utils.windowResize(function() { chart.update() });
                      return chart;
                    });
          }
        });      
      });


    :css
      #chart svg {
        height: 500px;
      }
