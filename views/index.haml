!!!
%html
  %head
    %title Competitor Analysis
    %link{:rel => :stylesheet, :type => :"text/css", :href => "/stylesheets/nv.d3.css"}
  %body
    %h3 Competitor Analysis
    %script{src: "http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"}
    %script{src: "http://js.pusher.com/2.1/pusher.min.js"}
    %script{src: "../js/d3.js"}
    %script{src: "../js/nv.d3.js"}
    %script{src: "../js/Graph.js"}
    

    :javascript
      nv.addGraph(function() {
        var chart = nv.models.lineChart()
                      .margin({left: 100, bottom: 100})  
                      .useInteractiveGuideline(true)  
                      .transitionDuration(350)  
                      .showLegend(true)       
                      .showYAxis(true)        
                      .showXAxis(true);
      
        chart.xAxis 
            .axisLabel('Date')
            .rotateLabels(-45)
            .tickFormat(function(d) { return d3.time.format('%d-%m-%Y %H:%M:%S')(new Date(d)) });
       
        chart.yAxis
            .axisLabel('Latency (ms)')
            .tickFormat(d3.format('.0f'));
       
        var pusherData = #{@pusher_data};
        var pubnubData = #{@pubnub_data};
        var realtimecoData = #{@realtime_co_data};

        // Make the dates easy for d3 to work with
        pusherData["values"].forEach(function(hash) {
          hash["x"] = new Date(hash["x"]);
        });

        pubnubData["values"].forEach(function(hash) {
          hash["x"] = new Date(hash["x"]);
        });

        realtimecoData["values"].forEach(function(hash) {
          hash["x"] = new Date(hash["x"]);
        });

        var serviceData = [pusherData, pubnubData, realtimecoData];
       
        d3.select('#chart svg')    
            .datum(serviceData)         
            .call(chart);
       
        //Update the chart when window resizes.
        nv.utils.windowResize(function() { chart.update() });
        return chart;
      });

      var pusher = new Pusher( 'a8536d1bddd6f5951242' );
      var mongoUpdateChannel = pusher.subscribe( 'mongo' );
      mongoUpdateChannel.bind( 'latencies-update', function( message ) {
        $.ajax({
          type: 'POST',
          url: '/new_data',
          success: function (response) {
                    console.log(response);
                    var updatedData = response;
                    
                    nv.addGraph(function() {
                      var chart = nv.models.lineChart()
                      .margin({left: 100, bottom: 100})  
                      .useInteractiveGuideline(true)  
                      .transitionDuration(350)  
                      .showLegend(true)       
                      .showYAxis(true)        
                      .showXAxis(true);
                      chart.xAxis 
                      .axisLabel('Date')
                      .rotateLabels(-45)
                      .tickFormat(function(d) { return d3.time.format('%d-%m-%Y %H:%M:%S')(new Date(d)) });
                       
                      chart.yAxis
                      .axisLabel('Latency (ms)')
                      .tickFormat(d3.format('.0f'));
    
                      var pusherData = JSON.parse(updatedData[0]);
                      var pubnubData = JSON.parse(updatedData[1]);
                      var realtimecoData = JSON.parse(updatedData[2]);

                      // Make the dates easy for d3 to work with
                      pusherData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      pubnubData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      realtimecoData["values"].forEach(function(hash) {
                        hash["x"] = new Date(hash["x"]);
                      });

                      var serviceData = [pusherData, pubnubData, realtimecoData];

                      d3.select('#chart svg')    
                      .datum(serviceData)
                      .call(chart);

                      //Update the chart when window resizes.
                      nv.utils.windowResize(function() { chart.update() });
                      return chart;
                    });
          }
        });      
      });


    :css
      #chart svg {
        height: 500px;
      }
    #chart
      %svg

