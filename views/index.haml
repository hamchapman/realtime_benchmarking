!!!
%html
  %head
    %title Realtime Benchmarks
    %link{:rel => :stylesheet, :type => :"text/css", :href => "/stylesheets/nv.d3.css"}
    %link{:rel => :stylesheet, :type => :"text/css", :href => "/stylesheets/index.css"}
    %link{:rel => :stylesheet, :type => :"text/css", :href => 'http://fonts.googleapis.com/css?family=Open+Sans:400,700,600,300'}
  %body
    %script{src: "http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"}
    %script{src: "http://js.pusher.com/2.1/pusher.min.js"}
    %script{src: "../js/d3.js"}
    %script{src: "../js/nv.d3.js"}
    %script{src: "../js/Graph.js"}

    %header.main-heading Realtime Benchmarks
    
    %div.timeframe
      I want to see data since
      %input{:type =>"text", :name =>"time", :class => "update-graph-text", :placeholder => "yesterday morning"}
      %input{:type => "submit", :value => "Update", :class => "update-graph-button"}
  
    %div.current-timeframe{ data: { timeframe: "last week" } }

    %section.sidebar
      %div.reliability-sidebar Reliability
      %div.latency-sidebar Ruby Latency
      %div.js-latency-sidebar JS Latency

    %section.content

      %section.reliabilities
        %div.service-reliabilities
          %div.service-reliability
            %div.service-title.pusher-title
              Pusher
            %h3.pusher-reliability-score
          %div.service-reliability
            %div.service-title.pubnub-title
              PubNub
            %h3.pubnub-reliability-score
          %div.service-reliability
            %div.service-title.realtimeco-title
              RealtimeCo
            %h3.realtimeco-reliability-score

      #chart_latency
        %svg

      #chart_js_latency
        %svg
    
    :javascript
      $( document ).ready(function() {

        // Adding Ruby latency graph
        nv.addGraph(function() {
          var chart = nv.models.lineChart()
            .margin({left: 100, bottom: 120})  
            .useInteractiveGuideline(true)  
            .transitionDuration(350)  
            .showLegend(true)       
            .showYAxis(true)        
            .showXAxis(true);
        
          chart.xAxis 
            .rotateLabels(-45)
            .tickFormat(function(d) { return d3.time.format('%d-%m-%Y %H:%M:%S')(new Date(d)) });
         
          chart.yAxis
            .axisLabel('Latency (ms)')
            .tickFormat(d3.format('.0f'));
          

          // var pusherData = #{@pusher_latency};
          // var pubnubData = #{@pubnub_latency};
          // var realtimecoData = #{@realtime_co_latency};


          //// Make the dates easy for d3 to work with
          // pusherData["values"].forEach(function(hash) {
          //   hash["x"] = new Date(hash["x"]);
          // });

          // pubnubData["values"].forEach(function(hash) {
          //   hash["x"] = new Date(hash["x"]);
          // });

          // realtimecoData["values"].forEach(function(hash) {
          //   hash["x"] = new Date(hash["x"]);
          // });

          // var serviceData = [pusherData, pubnubData, realtimecoData];
          
          var serviceData = [#{@pusher_latency}, #{@pubnub_latency}, #{@realtime_co_latency}];

          serviceData.forEach(function(individualServiceData) {
            individualServiceData["values"].forEach(function(hash) {
              hash["x"] = new Date(hash["x"]);
            });
          });

          d3.select('#chart_latency svg')    
            .datum(serviceData)         
            .call(chart);
         
          //Update the chart when window resizes.
          nv.utils.windowResize(function() { chart.update() });
          return chart;
        });

        // Adding JS latency graph

        nv.addGraph(function() {
          
          // var pusherJSData = #{@pusher_js_latency};
          // var pubnubJSData = #{@pubnub_js_latency};
          // var realtimecoJSData = #{@realtime_co_js_latency};
          // var firebaseJSData = #{@firebase_js_latency};
          // var goinstantJSData = #{@goinstant_js_latency};
          
          //// Make the dates easy for d3 to work with
          // pusherJSData["values"].forEach(function(hash) {
          //   hash["x"] = new Date(hash["x"]);
          // });
          // pubnubJSData["values"].forEach(function(hash) {
          //   hash["x"] = new Date(hash["x"]);
          // });
          // realtimecoJSData["values"].forEach(function(hash) {
          //   hash["x"] = new Date(hash["x"]);
          // });
          // firebaseJSData["values"].forEach(function(hash) {
          //   hash["x"] = new Date(hash["x"]);
          // });
          // goinstantJSData["values"].forEach(function(hash) {
          //   hash["x"] = new Date(hash["x"]);
          // });

          // var serviceJSData = [pusherJSData, pubnubJSData, realtimecoJSData, firebaseJSData, goinstantJSData];

          // var serviceWideMaxY = 0;

          //// Calculate maximum y value in JS latency data
          // serviceJSData.forEach(function(individualServiceData) {
          //   var dataPoints = individualServiceData["values"];
          //   dataPoints.forEach(function(point) {
          //   var yValue = point["y"];
          //     if (parseFloat(yValue) > serviceWideMaxY) {
          //       serviceWideMaxY = parseFloat(yValue);
          //     }
          //   })
          // });
  
          var serviceJSData = [#{@pusher_js_latency}, #{@pubnub_js_latency}, #{@realtime_co_js_latency}, #{@firebase_js_latency}, #{@goinstant_js_latency}];
          var serviceWideMaxY = 0;

          // Make the dates easy for d3 to work with and calculate maximum y value
          serviceJSData.forEach(function(individualServiceData) {
            individualServiceData["values"].forEach(function(hash) {
              hash["x"] = new Date(hash["x"]);
              var yValue = hash["y"];
              if (parseFloat(yValue) > serviceWideMaxY) {
                serviceWideMaxY = parseFloat(yValue);
              }
            });
          });

          var chart = nv.models.lineChart()
            .margin({left: 100, bottom: 120})  
            .useInteractiveGuideline(true)  
            .transitionDuration(350)  
            .showLegend(true)       
            .showYAxis(true)        
            .showXAxis(true)
            .forceY([0, serviceWideMaxY]);
        
          chart.xAxis
            .rotateLabels(-45)
            .tickFormat(function(d) { return d3.time.format('%d-%m-%Y %H:%M:%S')(new Date(d)) });
         
          chart.yAxis
            .axisLabel('Latency (ms)')
            .tickFormat(d3.format('.0f'));
         
          d3.select('#chart_js_latency svg')    
            .datum(serviceJSData)         
            .call(chart);
         
          nv.utils.windowResize(function() { chart.update() });
          return chart;
        });

        var pusherReliability = #{@pusher_reliability};
        $(".pusher-reliability-score").text(pusherReliability["reliability"] + "%")
        var pubnubReliability = #{@pubnub_reliability};
        $(".pubnub-reliability-score").text(pubnubReliability["reliability"] + "%")
        var realtimecoReliability = #{@realtime_co_reliability};
        $(".realtimeco-reliability-score").text(realtimecoReliability["reliability"] + "%")

      });